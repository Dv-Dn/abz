@mixin clearfix() {
  &:before,
  &:after {
    display: table;
    clear: both;
    content: "";
  }
}

@mixin min-max($min-width, $max-width, $padding) {
  box-sizing: border-box;
  min-width: $min-width;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 $padding;
}

@mixin visually-hidden() {
  position: absolute;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  white-space: nowrap;
  border: 0;

  clip-path: inset(100%);
}
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. '
    + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin imgRetina(
  $image,
  $extension,
  $bs: cover,
  $position: center,
  $repeat: no-repeat
) {
  background: url($image+"."+$extension) $repeat $position;

  @media screen and (-webkit-min-device-pixel-ratio: 2),
    screen and (min--moz-device-pixel-ratio: 2),
    screen and (-moz-min-device-pixel-ratio: 2),
    screen and (-o-min-device-pixel-ratio: 2/1),
    screen and (min-device-pixel-ratio: 2),
    screen and (min-resolution: 192dpi),
    screen and (min-resolution: 2dppx) {
    background: url($image+"@2x"+"."+$extension) $repeat $position;
    background-size: $bs;
  }
}
